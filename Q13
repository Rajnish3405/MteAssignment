How to merge two sorted linked lists into one sorted list.

Algorithm:
Compare head nodes.
Add smaller one to result.
Move that list’s pointer forward.
Repeat until both lists are empty.

Code:
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

public class MergeSortedLists {
    public static ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }

        current.next = (l1 != null) ? l1 : l2;
        return dummy.next;
    }
}

Example:
Input: [1, 2, 4], [1, 3, 5] → Output: [1, 1, 2, 3, 4, 5]

Time Complexity: O(n + m)
Space Complexity: O(1)

